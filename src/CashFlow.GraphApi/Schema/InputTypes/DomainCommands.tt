﻿<#@ output extension=".cs" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="..\..\..\Templates\Base.tt" #>
<#

string GetFieldType(FieldDefinition field)
{
    var typeName = field.Type;
    if (field.NestedType != null)
    {
        var baseTypeName = typeName.TrimEnd(new[] { '[', ']' });
        typeName = typeName.Replace(baseTypeName, $"{baseTypeName}Parameters");
    }

    // Optional value type
    if (!field.IsRequired && field.NestedType == null && IsValueType(field))
        return $"{typeName}?";

    // Required reference type
    if (field.IsRequired && (field.NestedType != null || !IsValueType(field)))
        return $"NonNull<{typeName}>";

    // Other
    return typeName;
}

#>
using CashFlow.Enums;
using GraphQL.Conventions;

namespace CashFlow.GraphApi.Schema
{
<#
var commands = LoadDefinitions(this.Host.ResolvePath(@".\..\..\..\CashFlow.Command.Abstractions\Definitions"), "*.Commands.def");
var nestedTypes = ExtractNestedTypes(commands);

foreach (var type in commands.Union(nestedTypes))
{
    if (type.IsObsolete) continue;

    if (type.Description != null)
    {
#>
    [Description("<#=type.Description #>")]
<#
    }
#>
    [InputType]
    public sealed class <#=type.Name #>Parameters
    {
<#
    foreach (var field in type.Fields)
    {
        if (field.IsRequired && field.DefaultValue != null) continue;

        if (field.Description != null)
        {
#>
        [Description("<#=field.Description #>")]
<#
        }

#>
        public <#=GetFieldType(field) #> <#=field.Name #> { get; set; }
<#
    }
#>
    }

<#
}
#>
}
